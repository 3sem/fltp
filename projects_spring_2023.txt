2) Grammars with contexts

Для парсера C с двухсторонними контекстами придумать правила семантического разбора, покрывающие некоторые проверки, которые можно делать прямо во время разбора. 
--
Подстказка 1. В общем виде, расширенная форма правил грамматики будет выглядеть как:

A → <D1>B<D1;D2>, где <D1> -- некоторое семантическое действие до, <D1;D2> -- после (см. пособие: http://sp.cs.msu.ru/courses/prak2/lang_grams.pdf, с 40-й стр. и 2 примера на 44-45 сс.)

Нужно свести эти действия к проверке выводимости чего-то из терминалов L и R соответственно где-то слева и справа от B в дереве вывода.

Например, A → <D1>BC, вывод BC должен происходить тогда и только тогда, когда где-то слева выведена подстрока, для которой некоторое условие истинно (например, тип переменной правильный). Эта подстрока выводится из нетерминала L. Тогда это правило следует записать как правило грамматики с контекстами  A → BC > L, где L -- оператор нестрогого взятия левого контекста (см. статью М. Бараша, А. Охотина).


--
Варианты проверок:
1. Любая функция, которая объявлена и реализована в данной единице трансляции, должна быть в ней использована миннимум 1 раз. (правило чисто для тестирования)
2. Любому malloc на некотором указателе должен соответствовать ниже по коду _единственный_ free на этом же указателе (не будем заморачиваться с анализом псевдонимов и считаем такой анализ внутрипроцедурным -- проверяем только внутри одной функции -- эта проверка -- как подсказка "Вы управляете памятью вручную -- не забудьте очистить")
3. В операторе присваивания типы переменной и выражения должны совпадать.
4. В условном операторе и в операторе цикла в качестве условия возможно только логическое выражение.
5. Придумать ещё.

